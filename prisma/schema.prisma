// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  displayName   String?

  accounts          Account[]
  sessions          Session[]
  Task              Task[]
  HouseholdsOnUsers HouseholdsOnUsers[]
  invited           HouseholdsOnUsers[] @relation("invited")
  created           HouseholdsOnUsers[] @relation("created")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Household {
  id   String @id @default(cuid())
  name String

  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  zipCode      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  images            Image[]
  tasks             Task[]
  groceries         Grocery[]
  inventory         InventoryItem[]
  pets              Pet[]
  householdsOnUsers HouseholdsOnUsers[]
}

model Task {
  id                String    @id @default(cuid())
  householdId       String
  name              String
  frequency         String
  scheduledDay      Int       @default(1)
  priority          Int
  dueDate           DateTime?
  lastCompletedDate DateTime?
  assignedTo        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User?     @relation(fields: [assignedTo], references: [id], onDelete: SetNull)
  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
}

model HouseholdsOnUsers {
  householdId    String
  userId         String
  createdById    String?
  invitedById    String?
  inviteAccepted Boolean?
  isOwner        Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitedBy User?     @relation("invited", fields: [invitedById], references: [id], onDelete: SetNull)
  createdBy User?     @relation("created", fields: [createdById], references: [id], onDelete: SetNull)

  @@id([householdId, userId])
}

model Image {
  itemId  String
  url     String  @unique
  alt     String?
  caption String?

  household Household     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  inventory InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  pet       Pet           @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Grocery {
  id          String  @id @default(cuid())
  householdId String
  name        String
  quantity    Int
  unit        String
  isMarked    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
}

model InventoryItem {
  id            String   @id @default(cuid())
  householdId   String
  name          String
  quantity      Int
  unit          String
  serialNo      String?
  modelNo       String?
  purchaseDate  DateTime?
  purchasePrice Decimal?
  wholeItemId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  images    Image[]
  wholeItem InventoryItem?  @relation("ItemParts", fields: [wholeItemId], references: [id], onDelete: Cascade)
  parts     InventoryItem[] @relation("ItemParts")
  household Household       @relation(fields: [householdId], references: [id], onDelete: Cascade)
}

model Pet {
  id              String    @id @default(cuid())
  householdId     String
  name            String
  birthday        DateTime?
  species         String?
  breed           String?
  color           String?
  vetName         String?
  vetAddressLine1 String?
  vetAddressLine2 String?
  vetCity         String?
  vetState        String?
  vetZipCode      String?
  vetPhoneNo      String?
  vetEmail        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  images    Image[]
  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
}
