// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  displayName String?

  accounts      Account[]
  sessions      Session[]
  households    Household[]
  Task              Task[]
  HouseholdsOnUsers HouseholdsOnUsers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Household {
  id   String @id @default(cuid())
  name String

  addressLine1 String?
  addressLine2 String?
  city String?
  state String?
  zipCode String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())

  images Image[]
  users User[]
  tasks  Task[]
  HouseholdsOnUsers HouseholdsOnUsers[]
}

model Task {
  id                String    @id @default(cuid())
  householdId       String
  name              String
  frequency         String
  scheduledDay      Int       @default(1)
  priority          Int
  dueDate           DateTime?
  lastCompletedDate DateTime?
  assignedTo        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User?     @relation(fields: [assignedTo], references: [id], onDelete: SetNull)
  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
}

model HouseholdsOnUsers {
  householdId String
  userId      String

  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([householdId, userId])
}

model Image {
    itemId String
    url String @unique

    household Household @relation(fields: [itemId], references: [id], onDelete: Cascade)
}